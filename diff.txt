diff --git a/.github/workflows/deploy.yml b/.github/workflows/deploy.yml
index 0aa8d59..083dc56 100644
--- a/.github/workflows/deploy.yml
+++ b/.github/workflows/deploy.yml
@@ -5,6 +5,10 @@ jobs:
   deploy:
     runs-on: ubuntu-latest
     steps:
+      - run:
+          name: "mv file"
+          command: |
+            mv app.py main.py
       - uses: actions/checkout@v2 #Be sure you check-out the repo first. Deta CLI needs access to the files
       - uses: BogDAAAMN/deta-deploy-action@v1.0.1
         with:
diff --git a/ReadMe.md b/ReadMe.md
index a791671..8ec842b 100644
--- a/ReadMe.md
+++ b/ReadMe.md
@@ -1,3 +1,14 @@
+---
+title: Hs Fast Api
+emoji: üê¢
+colorFrom: red
+colorTo: blue
+sdk: docker
+pinned: false
+license: openrail
+port: 8000
+---
+
 # fast-rapidapi
 Simple fastapi hosted on deta for rapidapi
 
diff --git a/main.py b/main.py
deleted file mode 100644
index f496628..0000000
--- a/main.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from fastapi import FastAPI
-import pandas as pd
-import os
-from deta import Deta
-from fastapi.responses import StreamingResponse, FileResponse
-from io import BytesIO
-
-from fastapi.middleware.cors import CORSMiddleware
-
-app = FastAPI()
-
-# load deta using 
-project_key = os.getenv("DETA_DRIVE_KEY")
-deta = Deta(project_key)
-drive = deta.Drive("stonk_events")
-
-app.add_middleware(
-    CORSMiddleware,
-    allow_origins=["*"],
-    allow_credentials=True,
-    allow_methods=["*"],
-    allow_headers=["*"],
-)
-
-@app.get("/files")
-async def get_files(exchange: str = "US"):
-    """
-    """
-    # get files in deta
-    result = drive.list()
-    all_files = result.get("names")
-    paging = result.get("paging")
-    last = paging.get("last") if paging else None
-
-    while (last):
-        # provide last from previous call
-        result = drive.list(last=last)
-
-        all_files += result.get("names")
-        # update last
-        paging = result.get("paging")
-        last = paging.get("last") if paging else None
-    return all_files
-
-
-# get file by name from deta /file/{id}
-# reason it was likely failing is because of the response size limit
-@app.get("/file/{id}")
-async def get_file(id: str):
-    res = drive.get(id)
-    return StreamingResponse(res.iter_chunks(1024), media_type="application/pdf")
-
